#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

// in function, variable can be re-defined
let function1 () = 
  let list1 = [1;2;3]
  let list1 = ([]: int list)
  list1
function1 ()

#!fsharp

let addOne x =
  x + 1

let timesTwo x =
  x * 2

let comp1 = addOne >> timesTwo
comp1 2

let comp2 = timesTwo >> addOne
comp2 2

#!fsharp

let rec fib n =
  match n with
  | 0 | 1 -> n
  | n -> fib (n - 1) + fib (n - 2)

#!fsharp

type MyClass() = 
  member this.Fib(n) = 
    match n with
    | 0 | 1 -> n
    | n -> this.Fib(n - 1) + this.Fib(n - 2)

#!fsharp

let rec Even x =
  if x = 0 then true
  else Odd (x - 1)
and Odd x =
  if x = 0 then false
  else Even (x - 1)

#!fsharp

// recursive Values
let rec nameDoubles = nameof nameDoubles + nameof nameDoubles

#!fsharp

let inline increment x =
  x + 1

type WrapInt32() =
  member inline this.incrementByOne(x) =
    x + 1
  static member inline Increment (x) = x + 1

#!fsharp

let inline iterateTwice ([<InlineIfLambda>] action) (array: 'T[]) =
  for i = 0 to array.Length - 1 do
    action array[i]
  for i = 0 to array.Length - 1 do
    action array[i]

let arr = [|1..100|]
let mutable sum = 0
arr |> iterateTwice (fun x -> sum <- sum + x)
sum
